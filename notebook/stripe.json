{
	"name": "stripe",
	"properties": {
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "SampleSpark",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "56g",
			"driverCores": 8,
			"executorMemory": "56g",
			"executorCores": 8,
			"numExecutors": 2,
			"runAsWorkspaceSystemIdentity": false,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "267982bd-b20c-4f05-b140-f92c5226f33a"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "python"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/7ee734d7-98fe-4bd4-ad7f-a30816ebebeb/resourceGroups/rg-surfalytics-analytics-westus2/providers/Microsoft.Synapse/workspaces/synapse-001/bigDataPools/SampleSpark",
				"name": "SampleSpark",
				"type": "Spark",
				"endpoint": "https://synapse-001.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/SampleSpark",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.4",
				"nodeCount": 3,
				"cores": 8,
				"memory": 56,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"pip install stripe pandas pyarrow pyspark adlfs"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"source": [
					"import stripe\n",
					"import pandas as pd\n",
					"from datetime import datetime\n",
					"import pyarrow as pa\n",
					"import pyarrow.parquet as pq\n",
					"from pyspark.sql import SparkSession\n",
					"from pyspark.sql.types import *\n",
					"import adlfs\n",
					"\n",
					"spark = SparkSession.builder \\\n",
					"    .appName(\"StripeDataToADLS\") \\\n",
					"    .getOrCreate()\n",
					"\n",
					"STRIPE_SECRET_KEY = ''\n",
					"account_name = 'datalstorage'\n",
					"account_key = ''\n",
					"container_name = 'datalstorage'\n",
					"relative_path = 'synapse/workspaces/synapse-001/warehouse/stripe/'\n",
					"\n",
					"# Construct ADLS path\n",
					"def get_adls_path(file_name):\n",
					"    return f'abfss://{container_name}@{account_name}.dfs.core.windows.net/{relative_path}{file_name}'\n",
					"\n",
					"\n",
					"# Set your Stripe secret key here\n",
					"stripe.api_key = STRIPE_SECRET_KEY\n",
					"\n",
					"\n",
					"def fetch_customers_with_subscriptions():\n",
					"    customers = []\n",
					"    for customer in stripe.Customer.list(limit=100).auto_paging_iter():\n",
					"        # Check if the customer has an active subscription\n",
					"        subscriptions = stripe.Subscription.list(customer=customer.id, limit=1)\n",
					"        if subscriptions['data']:\n",
					"            subscription = subscriptions['data'][0]\n",
					"            customers.append({\n",
					"                'customer_id': customer.id,\n",
					"                'email': customer.email,\n",
					"                'name': customer.name,\n",
					"                'subscription_status': subscription['status'],\n",
					"                # Convert amount from cents to dollars\n",
					"                'subscription_amount': subscription['items']['data'][0]['plan']['amount'] / 100,\n",
					"                'subscription_currency': subscription['items']['data'][0]['plan']['currency']\n",
					"            })\n",
					"    return customers\n",
					"\n",
					"\n",
					"def fetch_customers_with_one_time_purchases():\n",
					"    customers = []\n",
					"    for charge in stripe.Charge.list(limit=100).auto_paging_iter():\n",
					"        if charge.customer:  # Check if the charge has an associated customer\n",
					"            customer = charge.customer\n",
					"            customer_details = stripe.Customer.retrieve(customer)\n",
					"            customers.append({\n",
					"                'customer_id': customer,\n",
					"                'email': customer_details.email,\n",
					"                'name': customer_details.name,\n",
					"                'amount': charge.amount / 100,  # Convert amount from cents to dollars\n",
					"                'currency': charge.currency,\n",
					"                # Convert Unix timestamp to readable date\n",
					"                'created': datetime.fromtimestamp(charge.created).strftime('%Y-%m-%d %H:%M:%S'),\n",
					"                'description': charge.description,\n",
					"                'payment_status': charge.status\n",
					"            })\n",
					"    return customers\n",
					"\n",
					"\n",
					"def fetch_all_payments_for_customers():\n",
					"    payments = []\n",
					"    for customer in stripe.Customer.list(limit=100).auto_paging_iter():\n",
					"        for charge in stripe.Charge.list(customer=customer.id, limit=100).auto_paging_iter():\n",
					"            payments.append({\n",
					"                'customer_id': customer.id,\n",
					"                'email': customer.email,\n",
					"                'name': customer.name,\n",
					"                'amount': charge.amount / 100,  # Convert amount from cents to dollars\n",
					"                'currency': charge.currency,\n",
					"                # Convert Unix timestamp to readable date\n",
					"                'created': datetime.fromtimestamp(charge.created).strftime('%Y-%m-%d %H:%M:%S'),\n",
					"                'description': charge.description,\n",
					"                'payment_status': charge.status\n",
					"            })\n",
					"    return payments\n",
					"\n",
					"\n",
					"if __name__ == '__main__':\n",
					"    # Fetch customers with subscriptions\n",
					"    subscription_customers = fetch_customers_with_subscriptions()\n",
					"    df_subscriptions = pd.DataFrame(subscription_customers)\n",
					"    table_subscriptions = pa.Table.from_pandas(df_subscriptions)\n",
					"    subscription_customers_path = get_adls_path(\n",
					"        'subscription_customers.parquet')\n",
					"    fs = adlfs.AzureBlobFileSystem(\n",
					"        account_name=account_name, account_key=account_key)\n",
					"    with fs.open(subscription_customers_path, 'wb') as f:\n",
					"        pq.write_table(table_subscriptions, f)\n",
					"    print(f\"Subscription customers data saved to {subscription_customers_path}\")\n",
					"\n",
					"    # Fetch customers with one-time purchases\n",
					"    one_time_customers = fetch_customers_with_one_time_purchases()\n",
					"    df_one_time = pd.DataFrame(one_time_customers)\n",
					"    table_one_time = pa.Table.from_pandas(df_one_time)\n",
					"    one_time_customers_path = get_adls_path('one_time_customers.parquet')\n",
					"    with fs.open(one_time_customers_path, 'wb') as f:\n",
					"        pq.write_table(table_one_time, f)\n",
					"    print(f\"One-time purchase customers data saved to {one_time_customers_path}\")\n",
					"\n",
					"    # Fetch all payments for customers\n",
					"    all_payments = fetch_all_payments_for_customers()\n",
					"    df_payments = pd.DataFrame(all_payments)\n",
					"    table_payments = pa.Table.from_pandas(df_payments)\n",
					"    all_payments_path = get_adls_path('all_payments.parquet')\n",
					"    with fs.open(all_payments_path, 'wb') as f:\n",
					"        pq.write_table(table_payments, f)\n",
					"    print(f\"All payments data saved to {all_payments_path}\")\n",
					"\n",
					""
				],
				"execution_count": null
			}
		]
	}
}